//=============================================================================
//
// 攻撃種類 [attack.cpp]
// Author : 吉田悠人
//
//=============================================================================
//=============================================================================
// ヘッダファイルのインクルード
//=============================================================================
#include "attack.h"
#include "tile.h"

//=============================================================================
// コンストラクタ
//=============================================================================
CAttackBased::CAttackBased()
{
	//初期化処理
	m_nAttackType = CAttackManager::ATTACK_TYPE_1;
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	memset(&m_AttackData, 0, sizeof(CAttackManager::ATTACK_DATA));
}

//=============================================================================
// デストラクタ
//=============================================================================
CAttackBased::~CAttackBased()
{
}

//=============================================================================
// 初期化関数
//=============================================================================
HRESULT CAttackBased::Init(void)
{

	return S_OK;
}

//=============================================================================
// 終了関数
//=============================================================================
void CAttackBased::Uninit(void)
{
	//オブジェクトの破棄
	Release();
}

//=============================================================================
// 更新関数
//=============================================================================
void CAttackBased::Update(void)
{
}

//=============================================================================
// 描画関数
//=============================================================================
void CAttackBased::Draw(void)
{
}

//=============================================================================
// 攻撃タイプセッター関数
//=============================================================================
void CAttackBased::SetAttackType(CAttackManager::ATTACK_TYPE AttackType)
{
	m_nAttackType = AttackType;
}

//=============================================================================
// 攻撃タイプゲッター関数
//=============================================================================
CAttackManager::ATTACK_TYPE CAttackBased::GetAttackType(void)
{
	return m_nAttackType;
}

//=============================================================================
// 位置セッター関数
//=============================================================================
void CAttackBased::SetPos(D3DXVECTOR3 pos)
{
	m_pos = pos;
}

//=============================================================================
// 位置ゲッター関数
//=============================================================================
D3DXVECTOR3 CAttackBased::GetPos(void)
{
	return m_pos;
}
