//=============================================================================
//
// 弾の処理 [Bullet.cpp]
// Author : 佐藤颯紀
//
//=============================================================================

//=============================================================================
// インクルードファイル
//=============================================================================
#include "Bullet.h"
#include "manager.h"
#include "player.h"

//=============================================================================
// マクロ定義
//=============================================================================
#define MODEL_SIZE D3DXVECTOR3( 1.0f, 1.0f, 1.0f)	// サイズ
#define BULLET_LIFE		(20)	// 弾のライフ
//=============================================================================
// コンストラクタ
//=============================================================================
CBullet::CBullet() :CModel(OBJTYPE_BULLET)
{
	m_move = VEC3_ZERO;	// 移動量
	m_size = VEC3_ZERO; // サイズ
	m_nLife = 0;		// ライフ
	m_fSpeed = 0.0f;	// 速さ
}
//=============================================================================
// デストラクタ
//=============================================================================
CBullet::~CBullet()
{

}
//=============================================================================
// 生成処理
//=============================================================================
CBullet * CBullet::Create(D3DXVECTOR3 pos)
{
	CBullet *pBullet = NULL;

	// メモリの確保
	pBullet = new CBullet;

	// 初期化処理呼び出し
	pBullet->Init();

	pBullet->SetPos(pos);

	// オブジェクトタイプ
	pBullet->SetPriority(OBJTYPE_BULLET);

	return pBullet;
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CBullet::Init(void)
{
	// 初期化処理
	CModel::Init();

	// サイズの設定
	SetSize(MODEL_SIZE);

	// モデル割り当て
	BindModel(CResourceModel::GetModel(CResourceModel::MODEL_BULLET01));
	
	m_move = (D3DXVECTOR3(1.0f,0.0f,0.0f));

	m_nLife = BULLET_LIFE;
	
	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CBullet::Uninit()
{
	// 終了処理
	CModel::Uninit();
}

//=============================================================================
// 更新処理
//=============================================================================
void CBullet::Update()
{
	// 位置の取得
	D3DXVECTOR3 BulletPos = GetPos();

	// 位置に移動量を加算する
	BulletPos += m_move;

	// ライフを毎フレームごと減らしていく
	m_nLife--;

	// 位置の設定
	SetPos(BulletPos);

	// ライフが０になったら
	if (m_nLife == 0)
	{
		// 終了処理
		Uninit();
	}

}

//=============================================================================
// 描画処理
//=============================================================================
void CBullet::Draw()
{
	// 描画処理
	CModel::Draw();
}